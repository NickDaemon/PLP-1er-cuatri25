Definiciones:

{F1} foldDoc fVacio _ _ Vacio = fVacio
{F2} foldDoc fVacio fTexto fLinea (Texto s d) = fTexto s (foldDoc fVacio fTexto fLinea d)
{F3} foldDoc fVacio fTexto fLinea (Linea i d) = fLinea i (foldDoc fVacio fTexto fLinea d)

{I} indentar i d = foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+i) rec) d

{β} (\x -> Y) Z = Y --> reemplazando a x por Z
{η} \x -> F x = F 

Usando el principio de reemplazo, queremos ver que valen por definición: 
{L1}, {L2} y {L3}

{L1}
∀ k :: int , k ≥ 0. 
indentar k Vacio = Vacio

indentar k Vacio 
≡ {I}
foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+i) rec) Vacio
≡ {F1}
Vacio   -- > Que era a lo que queriamos llegar.
             Queda probado {L1}.

{L2}
∀ k :: int , k ≥ 0. ∀ s :: String, ∀ d :: Doc.
indentar k (Texto s d) = Texto s (indentar k d)

indentar k (Texto s d)
≡ {I}
foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+k) rec) (Texto s d)
≡ {F2}
(\t -> (rec -> Texto t rec)) s (foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+k) rec) d)
≡ {η}
(\t -> Texto t) s (foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+k) rec) d)
≡ {η}
Texto s (foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+k) rec) d)
≡ {I}
Texto s (indentar k d) --> Que era a lo que queriamos llegar.
                           Queda probado {L2}.

{L3}
∀ k, m :: int , k ≥ 0, m ≥ 0, ∀ d :: Doc.
indentar m (Linea k d) = Linea (m+k) (indentar m d) 

indentar m (Linea k d)
≡ {I} 
foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+m) rec) (Linea k d)
≡ {F3}
(\j -> (rec -> Linea (j+m) rec)) k (foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+m) rec) d)
≡ {η}
(\j -> Linea (j + m)) k (foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+m) rec) d)
≡ {β}
Linea (k+m) (foldDoc Vacio (\t rec -> Texto t rec) (\j rec -> Linea (j+m) rec) d)
≡ {I}
Linea (k+m) (indentar m d)
≡ {Por propiedad int positivos}
Linea (m+k) (indentar m d)  --> Que era a lo que queriamos llegar.
                                Queda demostrado {L3}.


Ahora usando induccion estructural sobre x , queremos probar que:

∀ n,m :: Int. (n ≥ 0 && m ≥ 0), ∀ x :: Doc.
indentar n (indentar m x) = indentar (n+m) x

Basta ver que valen:

1) Caso Base : P(Vacio)
2) Caso inductivo I : ∀ s :: String.      P(x) ⟹ P(Texto s x)
3) Caso Inductivo II: ∀ i :: Int , i ≥ 0. P(x) ⟹ P(Linea i x)

Con P(x) ≡ ∀ n,m :: Int. (n ≥ 0 && m ≥ 0)
           indentar n (indentar m x) = indentar (n+m) x

1) Caso Base:
indentar n (indentar m x) = indentar (n+m) x

Lado Izq:
indentar n (indentar m Vacio)
≡ {L1}
indentar n Vacio
≡ {L1}
Vacio

Lado Der:
indentar (n+m) Vacio
≡ {L1}
Vacio

Como Lado Izq = Lado Der, queda demostrado el caso base.

2) Caso inductivo I :

{HI} : indentar n (indentar m x) = indentar (n+m) x

Qvq:
indentar n (indentar m (Texto s x)) = indentar (n+m) (Texto s x)

Lado Izq:
indentar n (indentar m (Texto s x))
≡ {L2}
indentar n (Texto s (indentar m x))
≡ {L2}
Texto s (indentar n (indentar m x))
≡ {HI}
Texto s (indentar (n+m) x)
≡ {L2}
indentar (n+m) (Texto s x)

Como Lado Izq = Lado Der, Queda demostrado el Caso Inductivo I.

2) Caso inductivo II :

{HI} : indentar n (indentar m x) = indentar (n+m) x

Qvq:
indentar n (indentar m (Linea i x)) = indentar (n+m) (Linea i x)

indentar m (Linea k d) = Linea (m+k) (indentar m d) 

Lado Izq:
indentar n (indentar m (Linea i x))
≡ {L3}
indentar n (Linea (m+i) (indentar m x))
≡ {L3}
Linea (n + (m+i)) (indentar n (indentar m x))
≡ {HI}
Linea (n + (m+i)) (indentar (n+m) x)
≡ {Por propiedad de Int positivos}
Linea ((n+m) + i) (indentar (n+m) x)
≡ {L3}
indentar (n+m) (Linea i x)

Como Lado Izq = Lado Der , Queda demostrado Caso Inductivo II.

Como probamos 1), 2) y 3) queda demostrado P(x).




